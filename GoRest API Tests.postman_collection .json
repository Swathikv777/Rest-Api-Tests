{
	"info": {
		"_postman_id": "fffa546c-ff7b-4600-aaf4-aa2fc186b79b",
		"name": "GoRest API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37789623"
	},
	"item": [
		{
			"name": "User Tests",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains users data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each user has the required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function (user) {",
									"        pm.expect(user).to.have.property('id').that.is.a('number');",
									"        pm.expect(user).to.have.property('name').that.is.a('string');",
									"        pm.expect(user).to.have.property('email').that.is.a('string');",
									"        pm.expect(user).to.have.property('gender').that.is.oneOf(['male', 'female']);",
									"        pm.expect(user).to.have.property('status').that.is.oneOf(['active', 'inactive']);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User creation - Validate response fields\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check status code",
									"    pm.response.to.have.status(201);",
									"",
									"    // Validate mandatory fields",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('gender');",
									"    pm.expect(jsonData).to.have.property('status');",
									"",
									"    // Validate optional fields (assuming 'bio' is optional)",
									"    if (jsonData.bio) {",
									"        pm.expect(jsonData.bio).to.be.a('string');",
									"    }",
									"",
									"    // Validate field types",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.name).to.be.a('string');",
									"    pm.expect(jsonData.email).to.be.a('string');",
									"    pm.expect(jsonData.gender).to.be.oneOf(['male', 'female']);",
									"    pm.expect(jsonData.status).to.be.oneOf(['active', 'inactive']);",
									"});",
									"",
									"",
									"pm.test(\"User is created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set(\"userId\", jsonData.id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomEmail = `testuser${Math.random().toString(36).substring(7)}@gmail.com`;",
									"pm.environment.set(\"randomEmail\", randomEmail);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test User\",\n  \"gender\": \"male\",\n  \"email\": \"{{randomEmail}}\",\n  \"status\": \"active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"User is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post Tests",
			"item": [
				{
					"name": "Get User Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains posts data for user\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/userId/posts",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"userId",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post for a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Post is created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.environment.set(\"postId\", jsonData.id);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": \"{{userId}}\",\n  \"title\": \"Test Post Title\",\n  \"body\": \"This is a test post body.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/posts",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Post is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/posts/postId",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"posts",
								"postId"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Error Handling",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData[0]).to.have.property(\"field\");",
									"    pm.expect(jsonData[0]).to.have.property(\"message\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"gender\": \"unknown\",\n  \"email\": \"invalidEmail\",\n  \"status\": \"active\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments Tests",
			"item": [
				{
					"name": "Retreive Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Each comment has the necessary fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.above(0); ",
									"    jsonData.forEach(function (comment) {",
									"        pm.expect(comment).to.have.property('id');",
									"        pm.expect(comment).to.have.property('post_id');",
									"        pm.expect(comment).to.have.property('name');",
									"        pm.expect(comment).to.have.property('email');",
									"        pm.expect(comment).to.have.property('body');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/comments",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a comment by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment has the necessary fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('post_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('body');",
									"});",
									"",
									"pm.test(\"Comment ID matches requested ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.variables.get(\"commentId\")));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/comments",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Comment is created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('post_id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('body');",
									"    pm.environment.set(\"commentId\", jsonData.id); ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomEmail = `testuser${Math.random().toString(36).substring(7)}@gmail.com`;",
									"pm.environment.set(\"randomEmail\", randomEmail);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"post_id\": 1234,\n  \"name\": \"Test User\",\n  \"email\": \"{{randomEmail}}\",\n  \"body\": \"This is a test comment.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/comments",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomEmail = `testuser${Math.random().toString(36).substring(7)}@gmail.com`;",
									"pm.environment.set(\"randomEmail\", randomEmail);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Comment is updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id', parseInt(pm.variables.get(\"commentId\")));",
									"    pm.expect(jsonData.name).to.eql(\"Updated User\");",
									"    pm.expect(jsonData.body).to.eql(\"This is an updated test comment.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated User\",\n  \"email\": \"{{randomEmail}}\",\n  \"body\": \"This is an updated test comment.\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/comments/{{commentId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Comment is deleted\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/comments/{{commentId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"comments",
								"{{commentId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Todos Tests",
			"item": [
				{
					"name": "Create a Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Todo is created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(pm.response.status).to.eql(201);",
									"    pm.expect(jsonData).to.have.property('id').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('user_id').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('title').that.is.a('string');",
									"    pm.expect(jsonData).to.have.property('due_on').that.is.a('string');",
									"    pm.expect(jsonData).to.have.property('status').that.is.oneOf(['pending', 'completed']);",
									"    pm.environment.set(\"todoId\", jsonData.id); ",
									"});",
									"",
									"pm.test(\"SQL Injection Test\", function () {",
									"    pm.expect(pm.response.status).to.not.eql(500);  ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user_id\": {{userId}},\n  \"title\": \"Sample Todo Title\",\n  \"due_on\": \"2024-12-31T23:59:59.000Z\",\n  \"status\": \"pending\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve all Todos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Todos contain required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach(function(todo) {",
									"        pm.expect(todo).to.have.property('id');",
									"        pm.expect(todo).to.have.property('title');",
									"        pm.expect(todo).to.have.property('status');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve a Todo by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Todo has correct ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id', pm.environment.get(\"todoId\"));",
									"});",
									"",
									"pm.test(\"Todo has correct fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Update a Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Todo is updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('title', 'Updated Todo Title');",
									"    pm.expect(jsonData).to.have.property('status', 'completed');",
									"});",
									"",
									"pm.test(\"SQL Injection Test\", function () {",
									"    pm.expect(pm.response.status).to.not.eql(500);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Todo Title\",\n  \"status\": \"completed\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos/{{todoId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"{{todoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Todo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Todo is deleted successfully\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos/{{todoId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"{{todoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve by Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message', 'Resource not found');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos/999999999999",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos",
								"999999999999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation Tests",
			"item": [
				{
					"name": "Missing Mandatory Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate missing mandatory fields\", function () {",
									"    pm.expect(pm.response.status).to.eql(422); ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message').that.contains('is required');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Title Length and Date Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate title length\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title.length).to.be.below(255);  ",
									"});",
									"",
									"pm.test(\"Validate date format\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.due_on).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);  // ISO 8601 format",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Field Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate that due_on is not a past date\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(new Date(jsonData.due_on)).to.be.at.least(new Date());",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boundary Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test boundary value for title length\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.title.length).to.be.at.most(255);  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pagination and Limits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate pagination\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.length).to.be.at.most(10);  // Assuming a limit of 10 per page",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "02cb1142d6c7f2635f264e018c9be9c808fe645184a9ad31a2efb807bb027c06",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v2/todos",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"todos"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}